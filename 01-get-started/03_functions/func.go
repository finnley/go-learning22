package main

import "fmt"

// 函数的定义
// 形参
func add(a int, b int) int {
	return a + b
}

/**
内存的四个分区，代码区，数据区，栈区，堆区，go语言对内存堆区和栈区作了内存的封装，我们通常成为虚拟内存区，包括我们看到的地址也是虚拟地址

函数写完之后，它就是计算机指令，是存放内存中的代码区的；
当函数被调用时，它会加载到栈区，栈里面存放函数的参数信息，还有函数内部的局部变量，比如存放了add, 形参a, b；
栈是个特殊的容器，栈有个压栈和出栈的过程：
	比如会先加载main函数信息，加载完之后主函数定义了两个变量a,b, value，其中value需要调用一个函数；
	如果出现函数调用，需要加载另外一个函数内容，也就是需要将add函数加载内存中来，add函数里面定了两个变量a,b;
	当函数出现return的时候表示函数的结束，把后面表示的结果结算出来放到CPU存放数据的单元中，叫做寄存器
	函数结束的时候函数的信息就需要从栈区销毁，加载的时候从上到下依次加载，销毁是从下网上依次销毁，这也是函数的入栈和出栈；
	函数从栈区销毁后在代码区还存有一个函数格式的备份，如果再次调用的时候再次传参就会重新加载到栈区里面来；
	调用完主函数从寄存区拿到结果继续执行，寄存器如果没有使用功能下次会被覆盖；
	当执行到右括号部分主函数执行结束，销毁，所有程序的销毁表示一个程序的执行结束
*/
func main() {
	a := 10
	b := 20
	// 函数的调用
	// 实参
	value := add(a, b)
	fmt.Println(value) // 30
}
